pragma solidity >=0.4.22 <0.7.0;
pragma experimental ABIEncoderV2;

contract {{name}} {

    {{inputStreamName}}Event[{{windowLength}}] public window;
    uint256 public index;
    uint8 private precisionFactor = {{precision}};

    struct {{inputStreamName}}Event {
    {{#attributes}}
        {{type}} {{name}};
    {{/attributes}}
    }

    struct {{outputStreamName}}Event {
    {{#outAttributes}}
        {{type}} {{rename}};
    {{/outAttributes}}
    }

    {{ outputStreamName}}Event[] public processed{{outputStreamName}}Events;

    function set({{inputStreamName}}Event memory incoming{{inputStreamName}}Event) private {
        if(index == window.length) {
            index = 0;
        }

        window[index] = incomingTempStreamEvent;
        index++;
        check();
    }

    function process({{inputStreamName}}Event memory incoming{{inputStreamName}}Event) public {
        set(incoming{{inputStreamName}}Event);
    }

    function check() private {
        if(index == {{windowLength}}){
            processed{{outputStreamName}}Events.push({{outputStreamName}}Event({
            {{#outAttributes}}
                {{rename}}: {{function}}(){{#notLastItem}},{{/notLastItem}}
            {{/outAttributes}}
            }));
        }
    }

    {{#averageFunctions}}
    function {{functionName}}() private view returns ({{type}}) {
        {{type}} sum = 0;
        for({{type}} i = 0; i < index; i++){
            sum += window[i].{{member}};
        }
        {{type}} avg = sum / (index);
        return avg;
    }
    {{/averageFunctions}}

    {{#sumFunctions}}
    function {{functionName}}() private view returns ({{type}}) {
        {{type}} sum = 0;
        for({{type}} i = 0; i < index; i++){
            sum += window[i].{{member}};
        }
        return sum;
    }
    {{/sumFunctions}}

    {{#maxFunctions}}
    function {{functionName}}() private view returns ({{type}}) {
        {{type}} max = window[0].{{member}};
        for({{type}} i = 0; i < index; i++){
            if(window[i].{{member}} > max){
                max = window[i].{{member}};
            }
        }
        return max;
    }
    {{/maxFunctions}}

    {{#minFunctions}}
    function {{functionName}}() private view returns ({{type}}) {
        {{type}} min = window[0].{{member}};
        for({{type}} i = 0; i < index; i++){
            if(window[i].{{member}} < min){
                min = window[i].{{member}};
            }
        }
        return min;
    }
    {{/minFunctions}}

    {{#countFunctions}}
    function {{functionName}}() private view returns ({{type}}) {
        {{type}} count = window.length;
        return count;
    }
    {{/countFunctions}}
}
