pragma solidity >=0.4.22 <0.7.0;
pragma experimental ABIEncoderV2;

contract {{name}} {

    uint8 private precisionFactor = {{precision}};

    {{#inputStreamEventList}}
        struct {{inputStreamName}}Event {
        {{#streamAttributeList}}
            {{type}} {{name}};
        {{/streamAttributeList}}
        }

        struct {{inputStreamName}}EventDTO {
        {{#streamAttributeList}}
            string {{name}};
        {{/streamAttributeList}}
        }
    {{/inputStreamEventList}}

    struct {{outputStreamName}}Event {
    {{#streamOutputAttributeList}}
        {{type}} {{rename}};
    {{/streamOutputAttributeList}}
    }

    {{outputStreamName}}Event[] public {{outputStreamName}}Events;

{{#filterExpressionList}}
    function process({{inputStreamName}}EventDTO memory incoming{{inputStreamName}}EventDTO) public{

        {{inputStreamName}}Event memory incoming{{inputStreamName}}Event = {{inputStreamName}}Event({
    {{#inputStreamEventList}}
            {{#streamAttributeList}}
                {{name}} : {{#isParsed}}parseInt{{name}}({{/isParsed}}incoming{{inputStreamName}}EventDTO.{{name}}{{#isParsed}}){{/isParsed}}{{#notLastItem}},{{/notLastItem}}
            {{/streamAttributeList}}
        });
    {{/inputStreamEventList}}

        if {{{expression}}}{
            {{outputStreamName}}Events.push({{outputStreamName}}Event({
                {{#streamOutputAttributeList}}
                {{rename}}: {{#parseInt}}parseInt{{name}}({{/parseInt}}incoming{{inputStreamName}}Event.{{name}}{{#parseInt}}){{/parseInt}} {{#notLastItem}},{{/notLastItem}}
                {{/streamOutputAttributeList}}
            }));
        }
    }

{{/filterExpressionList}}

{{#windowExpressionList}}
    {{inputStreamName}}Event[{{windowLength}}] public window;
    uint256 public index;

    {{outputStreamName}}Event[] public processed{{outputStreamName}}Events;

    function set({{inputStreamName}}Event memory incoming{{inputStreamName}}Event) private {
        if(index == window.length) {
            index = 0;
        }
        window[index] = incomingTempStreamEvent;
        index++;
        check();
    }

    function process({{inputStreamName}}Event memory incoming{{inputStreamName}}Event) public {
        set(incoming{{inputStreamName}}Event);
    }

    function check() private {
        if(index == 5){
            processed{{outputStreamName}}Events.push({{outputStreamName}}Event({
            {{#streamOutputAttributeList}}
                {{rename}}: incoming{{inputStreamName}}Event.{{name}}{{#notLastItem}},{{/notLastItem}}
            {{/streamOutputAttributeList}}
        }));
        }
    }
{{/windowExpressionList}}

{{#sequenceExpressionList}}
    {{initialStreamName.name}}Event private initial{{initialStreamName.name}}Event;

    function process({{#inputStreamNames}}{{^isInitial}}{{name}}Event memory incoming{{name}}Event,{{/isInitial}}{{/inputStreamNames}}) public{

        if ({{{expression}}}){
            {{outputStreamName}}Events.push({{outputStreamName}}Event({
                {{#sequenceOutPuts}}
                    {{{.}}},
                {{/sequenceOutPuts}}
            }));
        }

        initial{{initialStreamName.name}}Event = incoming{{initialStreamName.name}}Event;
    }
{{/sequenceExpressionList}}

{{#windowFunctionList}}
{{#averageFunctions}}
    function {{functionName}}() private view returns ({{type}}) {
        {{type}} sum = 0;
        for({{type}} i = 0; i < index; i++){
            sum += window[i].{{member}};
        }
        {{type}} avg = sum / (index);

        return avg;
    }
{{/averageFunctions}}
{{#sumFunctions}}
    function {{functionName}}() private view returns ({{type}}) {
        {{type}} sum = 0;
        for({{type}} i = 0; i < index; i++){
            sum += window[i].{{member}};
        }

        return sum;
    }
{{/sumFunctions}}
{{#maxFunctions}}
    function {{functionName}}() private view returns ({{type}}) {
        {{type}} max = window[0].{{member}};
        for({{type}} i = 0; i < index; i++){
            if(window[i].{{member}} > max){
                max = window[i].{{member}};
            }
        }

        return max;
    }
{{/maxFunctions}}
{{#minFunctions}}
    function {{functionName}}() private view returns ({{type}}) {
        {{type}} min = window[0].{{member}};
        for({{type}} i = 0; i < index; i++){
            if(window[i].{{member}} < min){
                min = window[i].{{member}};
            }
        }

        return min;
    }
{{/minFunctions}}
{{#countFunctions}}
    function {{functionName}}() private view returns ({{type}}) {
        {{type}} count = window.length;
        return count;
    }
 {{/countFunctions}}
{{/windowFunctionList}}

{{#parseIntFunctions}}
    function {{functionName}}(string memory s) private view returns ({{type}}) {
        bytes memory b = bytes(s);
        {{type}} result = 0;
        for (uint i = 0; i < b.length; i++) {
            if (b[i] >= 48 && b[i] <= 57) {
                result = result * 10 + (uint(b[i]) - 48);
            }
        }
        return result * precisionFactor;
    }
{{/parseIntFunctions}}


}
