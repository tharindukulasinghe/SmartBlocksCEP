pragma solidity >=0.4.22 <0.7.0;
pragma experimental ABIEncoderV2;

contract {{name}} {

    struct {{inputStreamName}}Event {
    {{#attributes}}
        {{type}} {{name}};
    {{/attributes}}
    }

    struct {{inputStreamName}}EventDTO {
    {{#attributes}}
        string {{name}};
    {{/attributes}}
    }

    struct {{outputStreamName}}Event {
    {{#outAttributes}}
        {{type}} {{rename}};
    {{/outAttributes}}
    }


    {{outputStreamName}}Event[] public {{outputStreamName}}Events;

    function process({{inputStreamName}}Event memory incoming{{inputStreamName}}EventDTO) public{
    {{#isHasFilter}}
        if {{{expression}}}{
            {{outputStreamName}}Events.push({{outputStreamName}}Event({
            {{#outAttributes}}
                {{rename}}: incoming{{inputStreamName}}Event.{{name}}{{#notLastItem}},{{/notLastItem}}
            {{/outAttributes}}
            }));
        }
    {{/isHasFilter}}
    {{#isHasNoFilter}}
        {{outputStreamName}}Events.push({{outputStreamName}}Event({
        {{#outAttributes}}
            {{rename}}: incoming{{inputStreamName}}Event.{{name}}
        {{/outAttributes}}
        }));
    {{/isHasNoFilter}}
    }

    function stringToUint(string s) constant returns (uint) {
        bytes memory b = bytes(s);
        uint result = 0;
        for (uint i = 0; i < b.length; i++) {
            if (b[i] >= 48 && b[i] <= 57) {
                result = result * 10 + (uint(b[i]) - 48);
                success = true;
            } else {
                result = 0
                success = false;
                break;
            }
        }
        return result;
    }
}